/*_________________________________________________________

Test functions
log normal adaptive mutation
Selection operator: Tournament
__________________________________________________________*/

\User declarations :
#define SIZE 100
#define SIGMA  1.                     /*  mutation parameter */

#define MAX_PAPERS 155
#define PAP_KEYW 15
#define PAP_AUTH 10
#define PAP_INST 10
#define WILL_AUTH 100
#define UNWILL_AUTH 100
 
#define MAX_REVIEWERS 178
#define REV_KEYW 20
#define REV_WILL 50
#define REV_UNWILL 200

#define REV_PER_PAPER 4

int ppsn_EVALUATED_GENERATIONS=0;
int ppsn_NB_EVALUATIONS=0;
clock_t   ppsn_START, ppsn_FINISH;
double EZ_EVAL=0; // Time spent in the evaluator
double ppsn_LET=0; // Last Elapsed Time
double ppsn_LERT=1; // Last Evaluated Remaining Time
float ReplPerc=0;
int NbGen, PSize;

float pMutPerGene=0.1;

\end

\User functions:
#include <math.h>
#include <time.h>
int PAPERS, REVIEWERS;

struct PaperInfo {int Id;
       char Title[130];
       char Keyword[PAP_KEYW][35];
       char Author[PAP_AUTH][25];
       char Institution[PAP_INST][25];
       int WillingAuthor[WILL_AUTH];
       int UnwillingAuthor[UNWILL_AUTH];
      } PAPER[MAX_PAPERS];

struct ReviewerInfo {int Id;
       char Name[25];
       char Keyword[REV_KEYW][35];
       char Institution[25];
       int Willing[REV_WILL];
       int Unwilling[REV_UNWILL];
      } REVIEWER[MAX_REVIEWERS];

FILE *fpPapers, *fpReviewers;
FILE *fpWilling, *fpUnwilling;

inline char  mytolower(char c) {
  return ((c>=65)&&(c<=91)) ? c-=64:c;
}

inline int mystricmp(char *string1, char *string2){
  int i;
  for (i=0; string1[i]&&string2[i];i++){
    if (mytolower(string1[i])<mytolower(string2[i])) return -(i+1);
    if (mytolower(string1[i])>mytolower(string2[i])) return i+1;
  }
  if (string2[i]) return  -(i+1);
  if (string1[i]) return  i+1;
  return 0;
}

\end

\User CUDA:
\end

\Before everything else function:
{
  int i,j,k,Id,lastPaper,currentPaper;
  char *p,szTemp[1000];

  fpPapers=fopen("papers.txt","r");
  fpReviewers=fopen("review.txt","r");
  //fpWilling=fopen("wil.txt","r");  ON A PAS CES FICHIERS ?? 
  //fpUnwilling=fopen("unw.txt","r");

  for (i=0;i<MAX_PAPERS;i++) {
    strcpy(PAPER[i].Title," ");
    for (j=0;j<PAP_KEYW;j++) strcpy(PAPER[i].Keyword[j]," ");
    for (j=0;j<PAP_AUTH;j++) strcpy(PAPER[i].Author[j]," ");
    for (j=0;j<PAP_INST;j++) strcpy(PAPER[i].Institution[j]," ");
    for (j=0;j<WILL_AUTH;j++) PAPER[i].WillingAuthor[j]=999;
    for (j=0;j<UNWILL_AUTH;j++) PAPER[i].UnwillingAuthor[j]=999;
  }
  for (i=0;i<MAX_REVIEWERS;i++) {
    REVIEWER[i].Id=97834;
    strcpy(REVIEWER[i].Name," ");
    for (j=0;j<REV_KEYW;j++) strcpy(REVIEWER[i].Keyword[j]," ");
    strcpy(REVIEWER[i].Institution," ");
    for (j=0;j<REV_WILL;j++) REVIEWER[i].Willing[j]=999;
    for (j=0;j<REV_UNWILL;j++) REVIEWER[i].Unwilling[j]=999;
  }
  lastPaper=i=-1;

  while (i+1<MAX_PAPERS){
    if (fscanf(fpPapers,"| %d | ",&currentPaper)==EOF)break;
    if (currentPaper!=lastPaper) { // We have a new paper
      i++;
      lastPaper=PAPER[i].Id=currentPaper;
      if (fscanf(fpPapers,"%[^|] | ",PAPER[i].Title)==0) fscanf(fpPapers," | ");
      if (fscanf(fpPapers,"%[^|] | ",PAPER[i].Author[0])==0) fscanf(fpPapers," | ");
      if (fscanf(fpPapers,"%[^|] | ",szTemp)==0) fscanf(fpPapers," | ");
      for (p=&(szTemp[strlen(szTemp)-1]);(*p==' ')&&(p!=&szTemp[0]);p--); *(p+1)=0;
      if (p!=&szTemp[0]) {
        for (;(*p!='.')&&(p!=&szTemp[0]);p--); for (p--;(*p!='.')&&(*p!='@')&&(p!=&szTemp[0]);p--);
        strcpy(PAPER[i].Institution[0],p+1);
      }
      for (j=0;j<PAP_KEYW;j++) {
        fscanf(fpPapers," %[^,|]",&(PAPER[i].Keyword[j])); 
        for (k=strlen(PAPER[i].Keyword[j])-1;(PAPER[i].Keyword[j][k]==' ')&&(k>0);k--);PAPER[i].Keyword[j][k+1]=0;// remove trailing spaces
        if(getc(fpPapers)=='|') break;
      }
    }
    else {// another line for the same paper
      if (fscanf(fpPapers,"%[^|] | ",szTemp)==0) fscanf(fpPapers," | ");
      for (k=0;(k<PAP_AUTH);k++)     // looking for an empty space
        if ((PAPER[i].Author[k])[0]==' ') break; 
      if (fscanf(fpPapers,"%[^|] | ",PAPER[i].Author[k])==0) fscanf(fpPapers," | ");
      if (fscanf(fpPapers,"%[^|] | ",szTemp)==0) fscanf(fpPapers," | ");
      for (p=&(szTemp[strlen(szTemp)-1]);(*p==' ')&&(p!=&szTemp[0]);p--); *(p+1)=0;
      if (p!=&szTemp[0]) {
        for (;(*p!='.')&&(p!=&szTemp[0]);p--); for (p--;(*p!='.')&&(*p!='@')&&(p!=&szTemp[0]);p--);
        strcpy(PAPER[i].Institution[k],p+1);
      }
      fscanf(fpPapers,"%[^\n]",szTemp);
    }
    getc(fpPapers);
  }
  PAPERS=i+1;

  for (i=0;i<MAX_REVIEWERS;i++) {
    if (fscanf(fpReviewers,"| %d | ",&(REVIEWER[i].Id))==EOF)break;
    if (fscanf(fpReviewers,"%[^|] | ",REVIEWER[i].Name)==0) fscanf(fpReviewers," | ");
    if (fscanf(fpReviewers,"%[^|] | ",szTemp)==0) fscanf(fpReviewers," | ");
    for (p=&(szTemp[strlen(szTemp)-1]);(*p==' ')&&(p!=&szTemp[0]);p--); *(p+1)=0;
    if (p!=&szTemp[0]) {for (;(*p!='.')&&(p!=&szTemp[0]);p--); for (p--;(*p!='.')&&(*p!='@')&&(p!=&szTemp[0]);p--);strcpy(REVIEWER[i].Institution,p+1);}
    for (j=0;j<REV_KEYW;j++) {
      fscanf(fpReviewers," %[^,|]",&(REVIEWER[i].Keyword[j])); 
      for (k=strlen(REVIEWER[i].Keyword[j])-1;(REVIEWER[i].Keyword[j][k]==' ')&&(k>0);k--);REVIEWER[i].Keyword[j][k+1]=0;// remove trailing spaces
      if(getc(fpReviewers)=='|') break;
    }
    getc(fpReviewers);
  }
  REVIEWERS=i;

// FICHIER INEXISTANT DONC JE SUPPOSE YES POUR TOUS
    for(i=0;REVIEWER[i].Id!=Id;i++);
    for(j=0;j<=207;j++);//Il ya 207 PAPER
    for (k=0;(REVIEWER[i].Willing[k]!=999)||(REVIEWER[i].Willing[k]==j);k++);
    REVIEWER[i].Willing[k]=j;
    Id=j;
    for (j=0;(PAPER[j].Id!=Id)&&(j<PAPERS);j++);
    if (PAPER[j].Id==Id){
      for (k=0;(PAPER[j].WillingAuthor[k]!=999)&&(PAPER[j].WillingAuthor[k]!=i);k++);
      PAPER[j].WillingAuthor[k]=i;
    }
  // DONC UNWILLING VIDE
  fclose(fpPapers); fclose(fpReviewers);
}
\end

\After everything else function:
  //cout << "After everything else function called" << endl;
\end

\At the beginning of each generation function:{
}
\end

\At the end of each generation function:
  //cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
  //cout << "At each generation before replacement function called" << endl;
\end

\User classes :

class Match{
public:
// Default methods for class Match
  Match(){  // Constructor
  }
  Match(Match &EASEA_Var) {  // Copy constructor
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       reviewer[EASEA_Ndx]=EASEA_Var.reviewer[EASEA_Ndx];}
    Nb=EASEA_Var.Nb;
    Id=EASEA_Var.Id;
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       ReviewerId[EASEA_Ndx]=EASEA_Var.ReviewerId[EASEA_Ndx];}
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       KwMatch[EASEA_Ndx]=EASEA_Var.KwMatch[EASEA_Ndx];}
    Will_Unwill_Contribution=EASEA_Var.Will_Unwill_Contribution;
    KeywContribution=EASEA_Var.KeywContribution;
  }
  Match() {  // Destructor
  }
  Match& operator=(Match &EASEA_Var) {  // Operator=
    if (&EASEA_Var == this) return *this;
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       reviewer[EASEA_Ndx] = EASEA_Var.reviewer[EASEA_Ndx];}
    Nb = EASEA_Var.Nb;
    Id = EASEA_Var.Id;
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       ReviewerId[EASEA_Ndx] = EASEA_Var.ReviewerId[EASEA_Ndx];}
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       KwMatch[EASEA_Ndx] = EASEA_Var.KwMatch[EASEA_Ndx];}
    Will_Unwill_Contribution = EASEA_Var.Will_Unwill_Contribution;
    KeywContribution = EASEA_Var.KeywContribution;
  return *this;
  }

  bool operator==(Match &EASEA_Var) const {  // Operator==
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       if (reviewer[EASEA_Ndx]!=EASEA_Var.reviewer[EASEA_Ndx]) return gaFalse;}
    if (Nb!=EASEA_Var.Nb) return gaFalse;
    if (Id!=EASEA_Var.Id) return gaFalse;
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       if (ReviewerId[EASEA_Ndx]!=EASEA_Var.ReviewerId[EASEA_Ndx]) return gaFalse;}
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       if (KwMatch[EASEA_Ndx]!=EASEA_Var.KwMatch[EASEA_Ndx]) return gaFalse;}
    if (Will_Unwill_Contribution!=EASEA_Var.Will_Unwill_Contribution) return gaFalse;
    if (KeywContribution!=EASEA_Var.KeywContribution) return gaFalse;
  return gaTrue;
  }

  bool operator!=(Match &EASEA_Var) const {return !(*this==EASEA_Var);} // operator!=

  friend ostream& operator<< (ostream& os, const Match& EASEA_Var) { // Output stream insertion operator
    {os << "Array reviewer : ";
     for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       os << "[" << EASEA_Ndx << "]:" << EASEA_Var.reviewer[EASEA_Ndx] << "\t";}
    os << "\n";
    os <<  "Nb:" << EASEA_Var.Nb << "\n";
    os <<  "Id:" << EASEA_Var.Id << "\n";
    {os << "Array ReviewerId : ";
     for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       os << "[" << EASEA_Ndx << "]:" << EASEA_Var.ReviewerId[EASEA_Ndx] << "\t";}
    os << "\n";
    {os << "Array KwMatch : ";
     for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       os << "[" << EASEA_Ndx << "]:" << EASEA_Var.KwMatch[EASEA_Ndx] << "\t";}
    os << "\n";
    os <<  "Will_Unwill_Contribution:" << EASEA_Var.Will_Unwill_Contribution << "\n";
    os <<  "KeywContribution:" << EASEA_Var.KeywContribution << "\n";
    return os;
  }

  friend istream& operator>> (istream& is, Match& EASEA_Var) { // Input stream extraction operator
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       is >> EASEA_Var.reviewer[EASEA_Ndx];}
    is >> EASEA_Var.Nb;
    is >> EASEA_Var.Id;
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       is >> EASEA_Var.ReviewerId[EASEA_Ndx];}
    {for(int EASEA_Ndx=0; EASEA_Ndx<4; EASEA_Ndx++)
       is >> EASEA_Var.KwMatch[EASEA_Ndx];}
    is >> EASEA_Var.Will_Unwill_Contribution;
    is >> EASEA_Var.KeywContribution;
    return is;
  }

// Class members
  int reviewer[4];
  int Nb;
  int Id;
  int ReviewerId[4];
  int KwMatch[4];
  int Will_Unwill_Contribution;
  int KeywContribution;
};

inline int random(int b1=0, int b2=1){
  return GARandomInt(b1,b2);
}
inline double random(double b1=0, double b2=1){
  return GARandomDouble(b1,b2);
}
inline float random(float b1=0, float b2=1){
  return GARandomFloat(b1,b2);
}

// User Genome                                          
class ppsnGenome : public GAGenome {
// Default methods for class ppsnGenome
public:
  GADefineIdentity("ppsnGenome", 251);
  static void Initializer(GAGenome&);
  static int Mutator(GAGenome&, float);
  static float Comparator(const GAGenome&, const GAGenome&);
  static float Evaluator(GAGenome&);
  static int Crossover(const GAGenome&, const GAGenome&, GAGenome*, GAGenome*);
public:
  ppsnGenome::ppsnGenome() :GAGenome(Initializer, Mutator, Comparator){
    evaluator(Evaluator); crossover(Crossover);
  }
  ppsnGenome(const ppsnGenome & orig) {
    copy(orig);
  }
  ~ppsnGenome() {
// Destructing pointers
  }
  ppsnGenome& operator=(const ppsnGenome &);
  virtual GAGenome *clone(GAGenome::CloneMethod) const ;
  virtual void copy(const GAGenome & c);
  virtual int equal(const GAGenome& g) const;
  virtual int read(istream & is);
  virtual int write(ostream & os) const ;

// Class members
  int TotalKeywContribution;
  int Will_Unwill_Contribution;
  int NbPapersPerReviewerContribution;
  int Distribution[10];
  int NbPapersPerReviewer[178];
  Match paper[155];
};

ppsnGenome& ppsnGenome::operator=(const ppsnGenome & arg){ 
  copy(arg); 
  return *this;
}

void ppsnGenome::copy(const GAGenome& g) {
  if(&g != this){
    GAGenome::copy(g);    // copy the base class part
    ppsnGenome & genome = (ppsnGenome &)g;
// Memberwise copy
    TotalKeywContribution=genome.TotalKeywContribution;
    Will_Unwill_Contribution=genome.Will_Unwill_Contribution;
    NbPapersPerReviewerContribution=genome.NbPapersPerReviewerContribution;
    {for(int EASEA_Ndx=0; EASEA_Ndx<10; EASEA_Ndx++)
       Distribution[EASEA_Ndx]=genome.Distribution[EASEA_Ndx];}
    {for(int EASEA_Ndx=0; EASEA_Ndx<178; EASEA_Ndx++)
       NbPapersPerReviewer[EASEA_Ndx]=genome.NbPapersPerReviewer[EASEA_Ndx];}
    {for(int EASEA_Ndx=0; EASEA_Ndx<155; EASEA_Ndx++)
       paper[EASEA_Ndx]=genome.paper[EASEA_Ndx];}
  }
}

GAGenome*ppsnGenome::clone(GAGenome::CloneMethod) const {
  return new ppsnGenome(*this);
}

int ppsnGenome::equal(const GAGenome& g) const {
  ppsnGenome& genome = (ppsnGenome&)g;
// Default diversity test (required by GALib)
  if (TotalKeywContribution!=genome.TotalKeywContribution) return 0;
  if (Will_Unwill_Contribution!=genome.Will_Unwill_Contribution) return 0;
  if (NbPapersPerReviewerContribution!=genome.NbPapersPerReviewerContribution) return 0;
  {for(int EASEA_Ndx=0; EASEA_Ndx<10; EASEA_Ndx++)
     if (Distribution[EASEA_Ndx]!=genome.Distribution[EASEA_Ndx]) return 0;}
  {for(int EASEA_Ndx=0; EASEA_Ndx<178; EASEA_Ndx++)
     if (NbPapersPerReviewer[EASEA_Ndx]!=genome.NbPapersPerReviewer[EASEA_Ndx]) return 0;}
  {for(int EASEA_Ndx=0; EASEA_Ndx<155; EASEA_Ndx++)
     if (paper[EASEA_Ndx]!=genome.paper[EASEA_Ndx]) return 0;}
  return 1;
}

float ppsnGenome::Comparator(const GAGenome& a, const GAGenome& b) {
  ppsnGenome& sis = (ppsnGenome &)a;
  ppsnGenome& bro = (ppsnGenome &)b;
  int diff = 0;
// Default genome comparator (required by GALib)
  if (sis.TotalKeywContribution!=bro.TotalKeywContribution) diff++;
  if (sis.Will_Unwill_Contribution!=bro.Will_Unwill_Contribution) diff++;
  if (sis.NbPapersPerReviewerContribution!=bro.NbPapersPerReviewerContribution) diff++;
  {for(int EASEA_Ndx=0; EASEA_Ndx<10; EASEA_Ndx++)
     if (sis.Distribution[EASEA_Ndx]!=bro.Distribution[EASEA_Ndx]) diff++;}
  {for(int EASEA_Ndx=0; EASEA_Ndx<178; EASEA_Ndx++)
     if (sis.NbPapersPerReviewer[EASEA_Ndx]!=bro.NbPapersPerReviewer[EASEA_Ndx]) diff++;}
  {for(int EASEA_Ndx=0; EASEA_Ndx<155; EASEA_Ndx++)
     if (sis.paper[EASEA_Ndx]!=bro.paper[EASEA_Ndx]) diff++;}
  return (float)diff;
} 

int ppsnGenome::read(istream & is) {
// Default read command (required by GALib)
  is >> TotalKeywContribution;
  is >> Will_Unwill_Contribution;
  is >> NbPapersPerReviewerContribution;
  {for(int EASEA_Ndx=0; EASEA_Ndx<10; EASEA_Ndx++)
     is >> Distribution[EASEA_Ndx];}
  {for(int EASEA_Ndx=0; EASEA_Ndx<178; EASEA_Ndx++)
     is >> NbPapersPerReviewer[EASEA_Ndx];}
  {for(int EASEA_Ndx=0; EASEA_Ndx<155; EASEA_Ndx++)
     is >> paper[EASEA_Ndx];}
  return is.fail() ? 1 : 0;
}

int ppsnGenome::write(ostream & os) const {
// Default write command (required by GALib)
  os << "TotalKeywContribution:" << TotalKeywContribution << "\n";
  os << "Will_Unwill_Contribution:" << Will_Unwill_Contribution << "\n";
  os << "NbPapersPerReviewerContribution:" << NbPapersPerReviewerContribution << "\n";
  {os << "Array Distribution : ";
   for(int EASEA_Ndx=0; EASEA_Ndx<10; EASEA_Ndx++)
     os << "[" << EASEA_Ndx << "]:" << Distribution[EASEA_Ndx] << "\t";}
  os << "\n";
  {os << "Array NbPapersPerReviewer : ";
   for(int EASEA_Ndx=0; EASEA_Ndx<178; EASEA_Ndx++)
     os << "[" << EASEA_Ndx << "]:" << NbPapersPerReviewer[EASEA_Ndx] << "\t";}
  os << "\n";
  {os << "Array paper : ";
   for(int EASEA_Ndx=0; EASEA_Ndx<155; EASEA_Ndx++)
     os << "[" << EASEA_Ndx << "]:" << paper[EASEA_Ndx] << "\t";}
  os << "\n";
  return os.fail() ? 1 : 0;
}

\end

\GenomeClass::display:
  printf("TotalKeywContribution:%f\n", TotalKeywContribution);
  printf("Will_Unwill_Contribution:%f\n", Will_Unwill_Contribution);
  printf("NbPapersPerReviewerContribution:%f\n", NbPapersPerReviewerContribution);
  printf("Array Distribution :\n");
   for(int EASEA_Ndx=0; EASEA_Ndx<10; EASEA_Ndx++)
     printf("[%f]:%f\t", EASEA_Ndx,Distribution[EASEA_Ndx]);
   printf("Array NbPapersPerReviewer :\n");
   for(int EASEA_Ndx=0; EASEA_Ndx<178; EASEA_Ndx++)
     printf("[%f]:%f\t", EASEA_Ndx,NbPapersPerReviewer[EASEA_Ndx]);
   printf("Array paper :\n");
   for(int EASEA_Ndx=0; EASEA_Ndx<155; EASEA_Ndx++)
    printf("[%f]:%f\t", EASEA_Ndx,paper[EASEA_Ndx]); 
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  int i,j,k,nbWillingAuthors,again;
  for (i=0;i<PAPERS;i++){
    Genome.paper[i].KeywContribution=0;
    Genome.paper[i].Id=PAPER[i].Id;
// Choosing reviewers
    for (nbWillingAuthors=0;PAPER[i].WillingAuthor[nbWillingAuthors]!=999;nbWillingAuthors++);
    if (nbWillingAuthors<=REV_PER_PAPER){
      for(j=0;j<nbWillingAuthors;j++){
        Genome.paper[i].reviewer[j]=PAPER[i].WillingAuthor[j];
        Genome.paper[i].ReviewerId[j]=REVIEWER[Genome.paper[i].reviewer[j]].Id;
      }
      for (;j<REV_PER_PAPER;j++){
        do {
          again=0;
          Genome.paper[i].reviewer[j]=GARandomInt(0,REVIEWERS-1);
// refuse the reviewer if he is unwilling to review the paper
          for(k=0;(PAPER[i].UnwillingAuthor[k]!=999)&&(k<UNWILL_AUTH);k++)
            if(PAPER[i].UnwillingAuthor[k]==Genome.paper[i].reviewer[j]) {again=1;break;}
          for (k=0;(k<j)&&(again==0);k++) if (Genome.paper[i].reviewer[k]==Genome.paper[i].reviewer[j]) {again=1;break;}
        } while (again) ;
        Genome.paper[i].ReviewerId[j]=REVIEWER[Genome.paper[i].reviewer[j]].Id;
      }
    }
    else {
      for (j=0;j<REV_PER_PAPER;j++){
        do {
          again=0;
          Genome.paper[i].reviewer[j]=PAPER[i].WillingAuthor[GARandomInt(0,nbWillingAuthors-1)];
// refuse the reviewer if he is unwilling to review the paper
          for(k=0;(PAPER[i].UnwillingAuthor[k]!=999)&&(k<UNWILL_AUTH);k++)
            if(PAPER[i].UnwillingAuthor[k]==Genome.paper[i].reviewer[j]) {again=1;break;}
          for (k=0;k<j;k++) if (Genome.paper[i].reviewer[k]==Genome.paper[i].reviewer[j]) again++;
        } while (again) ;
        Genome.paper[i].ReviewerId[j]=REVIEWER[Genome.paper[i].reviewer[j]].Id;
      }
    }
  }

Genome._evaluated=gaFalse;

\end

\GenomeClass::crossover :
  int i,j;
  int pos=GARandomInt(0,PAPERS-1); // Picks a GARandomInt site named pos
    for(i=pos;i<PAPERS;i++)
      for(j=0;j<REV_PER_PAPER;j++)
        child.paper[i].reviewer[j]=parent1.paper[i].reviewer[j];
\end

\GenomeClass::mutator : // Must return the number of mutations
 
// Must return the number of mutations as an int
  int i,j,k,again,nbMut=0;
  for (i=0;i<PAPERS;i++) 
    if (GAFlipCoin(pmut)){
      for(j=0;j<REV_PER_PAPER;j++)
        if (GAFlipCoin(1-pmut)) do {
          again=0;
          Genome.paper[i].reviewer[j]=GARandomInt(0,REVIEWERS-1);
// refuse the reviewer if he is unwilling to review the paper
          for(k=0;(PAPER[i].UnwillingAuthor[k]!=999)&&(k<UNWILL_AUTH);k++)
            if(PAPER[i].UnwillingAuthor[k]==Genome.paper[i].reviewer[j]) {again=1;break;}
          for (k=0;k<j;k++) if (Genome.paper[i].reviewer[k]==Genome.paper[i].reviewer[j]) again++;
        } while (again) ;
      nbMut++;
    }
  return nbMut;

\end

\GenomeClass::evaluator : // Returns the score
{
  int contrib,i,j,k,l,matches,NbPapKwds,eval,nTemp;
  char *cpTemp;
  float f;
  clock_t EZ_t1;

  for (i=0;i<REVIEWERS;Genome.NbPapersPerReviewer[i++]=0);
  for (i=0;i<10;Genome.Distribution[i++]=0);
  Genome.Will_Unwill_Contribution=0;
  Genome.TotalKeywContribution=0;

  EZ_t1=clock();
  for (i=0;i<PAPERS;i++) {
    contrib=0;
    Genome.paper[i].Will_Unwill_Contribution=0;
    Genome.paper[i].Id=PAPER[i].Id;
    Genome.paper[i].Nb=i;
    for(j=0;j<REV_PER_PAPER;j++){
      Genome.paper[i].ReviewerId[j]=REVIEWER[Genome.paper[i].reviewer[j]].Id;

       matches=0;
      for (NbPapKwds=0;(NbPapKwds<PAP_KEYW)&&((PAPER[i].Keyword[NbPapKwds])[0]!=' ');NbPapKwds++); // Determines the nb of keywords for the current paper.
      if ((REVIEWER[Genome.paper[i].reviewer[j]].Keyword[0])[0]==' '){
        contrib+=5; // If the reviewer has no keyword list, we suppose this is equivalent to an average match (5/10)
        Genome.paper[i].KwMatch[j]=-1; // We signal the fact that the reviewer has no keywords by indicating "-1"
      }
      else {
        for(k=0;k<REV_KEYW;k++){
          cpTemp=&((REVIEWER[Genome.paper[i].reviewer[j]].Keyword[k])[0]);
          if (cpTemp[0]==' ') break;
          for(l=0;l<PAP_KEYW;l++){
            if ((PAPER[i].Keyword[l])[0]==' ') break;
            if (!strcmp(cpTemp,PAPER[i].Keyword[l]) ) matches++;
          }
        }
        if (matches==0) contrib-=10; // we discourage ill matching
        else contrib+=(matches*10)/NbPapKwds; // With this calculation,  a reviewer matching all the paper keywords gets 10/10
        Genome.paper[i].KwMatch[j]=matches;
      }

      // if paper and reviewer come from the same institution
      cpTemp=&((REVIEWER[Genome.paper[i].reviewer[j]].Institution)[0]);
      for(k=0;k<PAP_INST;k++){
        if (PAPER[i].Institution[k][0]==' ') break;
        if (!mystricmp(cpTemp,PAPER[i].Institution[k])) contrib-=1000;
      }

// if the reviewer has been willing to review the paper
      nTemp=Genome.paper[i].Id;
      for(k=0;k<REV_WILL;k++){
        if (REVIEWER[Genome.paper[i].reviewer[j]].Willing[k]==999) break;
        if (REVIEWER[Genome.paper[i].reviewer[j]].Willing[k]==nTemp) Genome.paper[i].Will_Unwill_Contribution+=10;
      }

      Genome.NbPapersPerReviewer[Genome.paper[i].reviewer[j]]++;

//--------------------------------------------------------------------------
    }
  Genome.paper[i].KeywContribution=contrib;
  Genome.TotalKeywContribution +=contrib;
  Genome.Will_Unwill_Contribution+=Genome.paper[i].Will_Unwill_Contribution;
  }

  contrib=0;

  for (i=0;i<REVIEWERS;i++){ 
    if (Genome.NbPapersPerReviewer[i]>=9) Genome.Distribution[9]++;
    else Genome.Distribution[Genome.NbPapersPerReviewer[i]]++;
    if (REV_PER_PAPER*PAPERS/REVIEWERS<1) {
      if (Genome.NbPapersPerReviewer[i]>1) contrib -= 10*(Genome.NbPapersPerReviewer[i] -1);
    }
    else{
      f=Genome.NbPapersPerReviewer[i]-REV_PER_PAPER*((float)PAPERS/(float)REVIEWERS);
      if (f>5) f=5;
      if (f>0.6) contrib -= (int)pow(5,f);   
      if (f<0.6) contrib +=(int)(10*f);    
    }
  }
  Genome.NbPapersPerReviewerContribution=contrib;

  eval = 100000+Genome.TotalKeywContribution+Genome.Will_Unwill_Contribution+Genome.NbPapersPerReviewerContribution;
  EZ_EVAL+=(double)(clock()-EZ_t1);
  return (float) (float) (double)(eval<0 ? 0 : eval);
}
\end

\User Makefile options: 
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 40   	// NB_GEN
  Time limit: 0 			// In seconds, 0 to deactivate
  Population size : 1000			//POP_SIZE
  Offspring size : 200 // 40% 
  Mutation probability : 0.2     // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : minimise      // Maximise
  Selection operator: Tournament 2.0
  Surviving parents: 100%//percentage or absolute  
  Surviving offspring: 100%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong			//Weak or Strong
  Elite: 1
  Print stats: true				//Default: 1
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true				//Default: 0

  Remote island model: false
  IP file: ip.txt 			//File containing all the remote island's IP
  Server port : 2929
  Migration probability: 0.33

  Save population: false
  Start from file:false
\end
	
